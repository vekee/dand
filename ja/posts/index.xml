<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on DUAN DAHAI</title><link>https://www.duandahai.com/ja/posts/</link><description>Recent content in Posts on DUAN DAHAI</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 11 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.duandahai.com/ja/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Pythonでファイルを圧縮する際のファイル名文字化け対策</title><link>https://www.duandahai.com/ja/posts/jp/20230111-python-zip.ja/</link><pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.duandahai.com/ja/posts/jp/20230111-python-zip.ja/</guid><description>Pythonでファイルを圧縮する際のファイル名文字化け対策をご紹介します。
日本語名のファイルに対して、Pythonでパスワード付き圧縮を実施する場合、ファイル名の文字化けが発生しました。
この問題はライブラリー内部仕様のため、ライブラリーを改造しないと解決できないそうですが、外部圧縮ツールをPython実装に利用して、強力、簡単的に圧縮できることを見つかりました。
外部圧縮ツール 私がAWS LambdaのPythonスクリプトに、7-zipのコマンドラインコマンドでzip処理を実施しています。 利用している7-zipツールの7zzsは以下のページからダウンロードしました。
7zipのコマンドライン
Windows環境にコマンドラインの利用はもちろんできます。
利用方法 私が7zzsをS3の指定場所に保存し、zip処理で、s3からLambdaの/tmp配下にダウンロードして利用しています。
この場合、7zzsの実行権限を設定する必要があるので、以下の実装をご参照ください。
Python実装 1 2 3 4 5 6 7 8 # zipツールのダウンロード実装略 # zipツールの実行権限を付与 cmd = f&amp;#34;chmod 755 /tmp/7zzs&amp;#34; os.system(cmd) # パスワード付きzipツールを実行する(パスワード: 123456) cmd = &amp;#34;/tmp/7zzs a 日本語名ファイル.zip 日本語名ファイル.pdf -p 123456&amp;#34; os.system(cmd) 7-zipのコマンドラインの利用紹介は、公開しているホームページにご参照ください。</description></item><item><title>Powershellを利用して、改行なし固定長ファイルを分割する</title><link>https://www.duandahai.com/ja/posts/jp/20221215-use-powershell-split-file/</link><pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.duandahai.com/ja/posts/jp/20221215-use-powershell-split-file/</guid><description>改行なし固定長ファイルについて、Powershellより分割する方法をご紹介します。
ファイル特徴 ファイルに改行なし、全てレコードを一行にあつめている。 各レコード長は固定のバイト数。 ファイルの文字コードが統一ではない、SJIS、UTF-8の可能性がある。 分割方法（性能弱） ネットで以下の分割スクリプトを見つかって、問題なく分割できるが、件数が10万件以上の場合、すごく時間がかかります。
1 2 3 4 5 6 7 8 $WindowSize = 400 $File = [System.IO.File]::OpenRead(&amp;#34;C:¥test.csv&amp;#34;) $Stream = New-Object System.IO.BinaryReader $File 0 .. (($File.Length - 1) / $WindowSize) |% { $str = [System.Text.Encoding]::Default.GetString($Stream.ReadBytes($WindowSize)) Write-Output $str | Out-File -Append &amp;#34;C:¥test.csv.out&amp;#34; } $File.Close() 分割方法（性能改善版） 上記のスクリプトを解析したら、ファイルストリムから1行づつのバイナリデータを読み込んで、1行づつを書き込み先ファイルに追加している仕様となります。
遅い原因は以下2点であると思います。
書き込み先ファイルを頻繁に使うこと 改善策例：1000行づつに書き込み先ファイルに追加 ファイルストリムを頻繁にアクセスすること 改善策例：ファイルストリムから1000行づつに読み込み 改善策を原因毎に取り込んで、以下のPowershellをご参照ください。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $LineByteLength = 400 $LineSlicesSize = 1000 $File = [System.</description></item><item><title>マップ状態を利用して、動的並列にLambdaを多重で実行する</title><link>https://www.duandahai.com/ja/posts/jp/20211027-aws-stepfunctions-map-state.ja/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.duandahai.com/ja/posts/jp/20211027-aws-stepfunctions-map-state.ja/</guid><description>Lambda実行時間の最大15分制限より、15分以内に処理完了するために、同一Lambdaを並行で処理する対策を説明します。
対策概要 AWS Lambda 関数：動的並列数制御処理 AWS Lambda 関数：業務処理 AWS Step Functions ステートマシン 動的並列数制御処理に処理する全体のデータ量より、並列数、各並列起動で処理するデータを決めて、Step Functions の OutputPathに並列数と同じなサイズのJsonリストで返却します。 Map stateがJsonリストの要素ごとに、各並列起動情報を引数として、業務処理を起動します。 業務処理に振り分けされたそれぞれの処理対象を処理して、15分以内に完了するように実現できます。
動的並列数制御処理 全件105のデータを多重で処理して、一つ並行処理ジョブに最大10件を処理する場合、 以下の制御情報リストを作成とします。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ { &amp;#39;oneJobProcessingCount&amp;#39;: 10, &amp;#39;offset&amp;#39;: 0 }, { &amp;#39;oneJobProcessingCount&amp;#39;: 10, &amp;#39;offset&amp;#39;: 10 }, { &amp;#39;oneJobProcessingCount&amp;#39;: 10, &amp;#39;offset&amp;#39;: 20 } ・・・・・・ { &amp;#39;oneJobProcessingCount&amp;#39;: 5, &amp;#39;offset&amp;#39;: 100 } ] 下記は制御情報を返却する実装例です。
note 並行処理ジョブ数を指定することより、平均的に全てのデータを分割して、並行処理することも可能です。</description></item><item><title>深層学習-第二章-線形代数</title><link>https://www.duandahai.com/ja/posts/jp/20210815-deeplearning-chapter2.ja/</link><pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate><guid>https://www.duandahai.com/ja/posts/jp/20210815-deeplearning-chapter2.ja/</guid><description>深層学習を勉強したメモです
2.1 スカラー、ベクトル、行列、テンソル スカラー（scalars）：スカラーは単なる単一の数である。 ヘクトル（vectors）：ベクトルは数値の配列である。 行列（matrices）：行列は2-Dの数値配列なので、各成分は一つだけでなく２つのインデックスで示される。 テンソル（tensors）：場合によっては、３つ以上の軸を持つ配列が必要になる。 Tip 行列の転置（transpose）の概念。
ブロードキャスティング（broadcasting）の概念.
2.2 行列とベクトルの乗算 2.3 単位行列と逆行列 2.4 線形従属と張る空間 2.5 ノルム 2.6 特殊な行列とベクトル 2.7 固有値分解 2.8 特異値分解 2.9 ムーア・ペンローズ擬似逆行列 2.10 トレース演算子 2.11 行列式 2.12 例：主成分分析 参考資料 DEEP LEARNING - IAN Goodfellow, Yoshua Bengio, Aaron Courville
岩澤有祐, 鈴木雅大, 中山浩太郎, 松尾豊【監訳】</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技術文章 on DUAN DAHAI</title><link>https://www.duandahai.com/ja/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0/</link><description>Recent content in 技術文章 on DUAN DAHAI</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 15 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.duandahai.com/ja/categories/%E6%8A%80%E8%A1%93%E6%96%87%E7%AB%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>Powershellを利用して、改行なし固定長ファイルを分割する</title><link>https://www.duandahai.com/ja/posts/jp/20221215-use-powershell-split-file/</link><pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.duandahai.com/ja/posts/jp/20221215-use-powershell-split-file/</guid><description>改行なし固定長ファイルについて、Powershellより分割する方法をご紹介します。
ファイル特徴 ファイルに改行なし、全てレコードを一行にあつめている。 各レコード長は固定のバイト数。 ファイルの文字コードが統一ではない、SJIS、UTF-8の可能性がある。 分割方法（性能弱） ネットで以下の分割スクリプトを見つかって、問題なく分割できるが、件数が10万件以上の場合、すごく時間がかかります。
1 2 3 4 5 6 7 8 $WindowSize = 400 $File = [System.IO.File]::OpenRead(&amp;#34;C:¥test.csv&amp;#34;) $Stream = New-Object System.IO.BinaryReader $File 0 .. (($File.Length - 1) / $WindowSize) |% { $str = [System.Text.Encoding]::Default.GetString($Stream.ReadBytes($WindowSize)) Write-Output $str | Out-File -Append &amp;#34;C:¥test.csv.out&amp;#34; } $File.Close() 分割方法（性能改善版） 上記のスクリプトを解析したら、ファイルストリムから1行づつのバイナリデータを読み込んで、1行づつを書き込み先ファイルに追加している仕様となります。
遅い原因は以下2点であると思います。
書き込み先ファイルを頻繁に使うこと 改善策例：1000行づつに書き込み先ファイルに追加 ファイルストリムを頻繁にアクセスすること 改善策例：ファイルストリムから1000行づつに読み込み 改善策を原因毎に取り込んで、以下のPowershellをご参照ください。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $LineByteLength = 400 $LineSlicesSize = 1000 $File = [System.</description></item><item><title>マップ状態を利用して、動的並列にLambdaを多重で実行する</title><link>https://www.duandahai.com/ja/posts/jp/20211027-aws-stepfunctions-map-state.ja/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.duandahai.com/ja/posts/jp/20211027-aws-stepfunctions-map-state.ja/</guid><description>Lambda実行時間の最大15分制限より、15分以内に処理完了するために、同一Lambdaを並行で処理する対策を説明します。
対策概要 AWS Lambda 関数：動的並列数制御処理 AWS Lambda 関数：業務処理 AWS Step Functions ステートマシン 動的並列数制御処理に処理する全体のデータ量より、並列数、各並列起動で処理するデータを決めて、Step Functions の OutputPathに並列数と同じなサイズのJsonリストで返却します。 Map stateがJsonリストの要素ごとに、各並列起動情報を引数として、業務処理を起動します。 業務処理に振り分けされたそれぞれの処理対象を処理して、15分以内に完了するように実現できます。
動的並列数制御処理 全件105のデータを多重で処理して、一つ並行処理ジョブに最大10件を処理する場合、 以下の制御情報リストを作成とします。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [ { &amp;#39;oneJobProcessingCount&amp;#39;: 10, &amp;#39;offset&amp;#39;: 0 }, { &amp;#39;oneJobProcessingCount&amp;#39;: 10, &amp;#39;offset&amp;#39;: 10 }, { &amp;#39;oneJobProcessingCount&amp;#39;: 10, &amp;#39;offset&amp;#39;: 20 } ・・・・・・ { &amp;#39;oneJobProcessingCount&amp;#39;: 5, &amp;#39;offset&amp;#39;: 100 } ] 下記は制御情報を返却する実装例です。
note 並行処理ジョブ数を指定することより、平均的に全てのデータを分割して、並行処理することも可能です。</description></item></channel></rss>
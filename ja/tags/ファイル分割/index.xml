<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ファイル分割 on DUAN DAHAI</title><link>https://www.duandahai.com/ja/tags/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%88%86%E5%89%B2/</link><description>Recent content in ファイル分割 on DUAN DAHAI</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 15 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.duandahai.com/ja/tags/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%88%86%E5%89%B2/index.xml" rel="self" type="application/rss+xml"/><item><title>Powershellを利用して、改行なし固定長ファイルを分割する</title><link>https://www.duandahai.com/ja/posts/jp/20221215-use-powershell-split-file/</link><pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate><guid>https://www.duandahai.com/ja/posts/jp/20221215-use-powershell-split-file/</guid><description>改行なし固定長ファイルについて、Powershellより分割する方法をご紹介します。
ファイル特徴 ファイルに改行なし、全てレコードを一行にあつめている。 各レコード長は固定のバイト数。 ファイルの文字コードが統一ではない、SJIS、UTF-8の可能性がある。 分割方法（性能弱） ネットで以下の分割スクリプトを見つかって、問題なく分割できるが、件数が10万件以上の場合、すごく時間がかかります。
1 2 3 4 5 6 7 8 $WindowSize = 400 $File = [System.IO.File]::OpenRead(&amp;#34;C:¥test.csv&amp;#34;) $Stream = New-Object System.IO.BinaryReader $File 0 .. (($File.Length - 1) / $WindowSize) |% { $str = [System.Text.Encoding]::Default.GetString($Stream.ReadBytes($WindowSize)) Write-Output $str | Out-File -Append &amp;#34;C:¥test.csv.out&amp;#34; } $File.Close() 分割方法（性能改善版） 上記のスクリプトを解析したら、ファイルストリムから1行づつのバイナリデータを読み込んで、1行づつを書き込み先ファイルに追加している仕様となります。
遅い原因は以下2点であると思います。
書き込み先ファイルを頻繁に使うこと 改善策例：1000行づつに書き込み先ファイルに追加 ファイルストリムを頻繁にアクセスすること 改善策例：ファイルストリムから1000行づつに読み込み 改善策を原因毎に取り込んで、以下のPowershellをご参照ください。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $LineByteLength = 400 $LineSlicesSize = 1000 $File = [System.</description></item></channel></rss>